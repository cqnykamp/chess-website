api-design
Charles Nykamp and Barry Nwike


This API has two different endpoints:
1. An endpoint which returns the game data of a particular game id
2. An endpoint that returns game metadatas of all games which fit search criteria

------------------------------------------------------------------------------------------------------------------

REQUEST: /game/<game_id>
    Returns the game data of the given game_id

RESPONSE: A JSON dictionary of the game data. The dictionary fields are:
    
    moves ----------- (TEXT) a string sequence of every move made in the game
    board_positions - (LIST OF TEXT) the state of the board at every turn. Each element in the list is
                        a 71-character-long string, where each character represents one square, except for
                        slashes which indicate the end of the row. See below for a table of which
                        characters correspond to which pieces.
    captured_pieces - (LIST OF TEXT) the piece captured, if there was one, after each turn. Each element in
                        the list is either a 1-character-long string or an empty string, if no piece was
                        captured that turn. See below for a table of which characters correspond to which pieces.
    ... the game metadata fields, see table below


------------------------------------------------------------------------------------------------------------------

REQUEST: /games[<search_criteria>]
    Request a list of all games which match a certain search criteria. The search criteria is specified by GET parameters.
    Multiple search parameters can be used, connected with an &
    Ex: /games?rating_max=1600&user=hello

GET Parameters:
    user ----------- (optional) Only include games where this user played. The value is case-insensitive,
                        and will also match any usernames which contain the given value.
                        Ex: /games?user=avocado
    turns ---------- (optional) returns games played with a certain number of turns
                    Ex: /games?turns+15 *games with more than 15 turns*
    rating_max ----- (optional) Only include games where both players are rated below this number
                        Ex: /games?rating_max=1600
    rating_min ----- (optional) Only include games where at least one player is rated above this number
                        Ex /games?rating_min=200

    moves ---------- (optional) Only include games which contain this move sequence
    opening_moves -- (optional) Only include games which start with these moves.
                            NOTE: The moves are specified in SAN format (Standard Algebraic Notation) separated by pluses.
                            For moves which contain plus signs such as Qf2+, escape them like Qf2%2B
    opening_name --- (optional) Only include games with this opening name or whose opening includes this opening name

    checks --------- (optional) Only include games with exactly this many checks
    captures ------- (optional) Only include games with exactly this many captures
    castles -------- (optional) Only include games with exactly this many castles
    en_passants ---- (optional) Only include games with exactly this many en passants
    promotions ----- (optional) Only include games with exactly this many promotions

    winner --------- (optional) Valid values are: white, black, draw

    page_id -------- (optional, default: 0) Limit the data returned to a certain number of entries. 
    page_size ------ (optional, default: 10) The number of entries per page.
                            NOTE: If either page_id or page_size is specified as non-negative integers, the API will
                            paginate the data. Otherwise, it will return all the data.


RESPONSE: A JSON list of dictionaries, where each dictionary contains data about a particular game. This JSON
    list will be sorted in descending order of player ranking. By the "player ranking" of a game, we mean the
    rating of the higher-ranked player. The fields of each game dictionary are:

    game_id --------- (TEXT) this id can be used to request the full game data (see /game/<game_id> endpoint)
    ... the game metadata fields, see table below

    Notice that these fields DO include data about the content of the game. Use /game/<game_id> for full game data.





---------------------------------------------------------------------------------------------------------------


Game Metadata Fields
------------------------
    white_username -- (TEXT)
    white_rating ---- (INTEGER)
    black_username -- (TEXT)
    black_rating ---- (INTEGER)
    turns ----------- (INTEGER) the number of moves in the game
    victory_status -- (TEXT) such as draw, outoftime, mate
    winner ---------- (TEXT) one of three values: "black", "white", or "draw"
    rated_status ---- (BOOLEAN) either the game is a rated match or not 
    opening_names ---- (LIST OF TEXT) A list where each string gives a chess opening of this game
    increment_code -- (TEXT) what the time rules were when the game was played. Ex: 15+2


Char | Piece
--------------
.       empty square
/       end of board row

P       white pawn
R       white rook
N       white knight
B       white bishop
K       white king
Q       white queen

p       black pawn
r       black rook
n       black knight
b       black bishop
k       black king
q       black queen
